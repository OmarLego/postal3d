//i fucking love copy and pasting code i could never write myself you dont understand



//im probably never using this its just so during testing the game doesnt die
class PostalActor : Actor 
{
	bool STD_NeverTarget, STD_NoKillLine;
	
	property NeverTarget : STD_NeverTarget;
	property NoKillLine : STD_NoKillLine;
}

class SpecialAction : Inventory
{
	Default
	{
	Inventory.MaxAmount 1;
	}
}

class PostalDude_Data : Inventory
{
	bool lastground;
	double lastvelz, prevvelz, MoveSpeed;
	
	// Share The Doom variables
	
	
	bool RunningStop;
	int RunningStopCooldown;
	
	bool DudeLineTriggered;
	int TimeBeforeDudeLine, DudeLineCooldown, DudeLineDelay;
	//int InsultCooldown;//same thing
	
	override void AttachToOwner(Actor other)
	{
		Super.AttachToOwner (other);
		MoveSpeed = vel.xy.Length();
	}
	
}

//7 layers of zscript libaries//basically the gc
class PostalDude : QuakePlayer
{
	PostalDude_Data PlayerData;
	
	// Trigger killing lines
	bool InitLine;
	int ChanceLocal;
	
	
	//Initial function for giving the Data inventory to the player.
	//According to phantombeta if these are stored in the PlayerPawn the information will get lost eventually.
	void DataInit()
	{
		if (!player || player.mo != self)
			return;
			
		if (!PlayerData)
		{
			if (!(PlayerData = PostalDude_Data(FindInventory('PostalDude_Data'))))
			{
				GiveInventory('PostalDude_Data', 1);
				PlayerData = PostalDude_Data(FindInventory('PostalDude_Data'));
			}
		}
	}
	
	//This function triggers killing spree lines.
	//Called by an EventHandler
	bool KillWithMGun, KillWithMachete, KillWithFire;
	void A_TriggerDudeLine(int Chance = 0)
	{
		if (IsActorPlayingSound(CHAN_VOICE) && !PlayerData.DudeLineTriggered)
		{
			InitLine = false;
			return;
		}
		
		if (InitLine == true)
		{
			let nweapon = PostalWeapon(Weapon(Player.ReadyWeapon));
			if (nweapon)
			{
				if (nweapon.PRLD_Machete)
					KillWithMachete = true;
				
				if (nweapon.PRLD_MGun)
					KillWithMGun = true;
				
				if (nweapon.PRLD_Fire)
					KillWithFire = true;
			}
			
			PlayerData.TimeBeforeDudeLine = level.time + 30;
			PlayerData.DudeLineTriggered = true;
			InitLine = false;
		}
		
		if (PlayerData.DudeLineTriggered == true)
		{
			Chance = ChanceLocal;
			//Console.Printf("Chance: %d", Chance);
			bool fail = true;
			
			// Corpses doesn't talk
			if (self.bKILLED)
			{
				PlayerData.DudeLineTriggered = false;
				return;
			}
			
			
			if (Chance < 200 && level.time > PlayerData.TimeBeforeDudeLine)
			{
				PlayerData.DudeLineCooldown = level.time + 35 * 2;
				
				if (KillWithMGun)
				{
					int randomnumber = random[pickline](1,26);
					sound Dude_KillWithMGun = string.Format("Dude_KillWithMGun%i",randomnumber);
					A_StartSound(Dude_KillWithMGun, CHAN_VOICE, CHANF_NOSTOP);
					KillWithMGun = false;
					PlayerData.DudeLineTriggered = false;
					fail = false;
				}
				
				if (KillWithMachete)
				{
					int randomnumber = random[pickline](1,22);
					sound Dude_KillWithMachete = string.Format("Dude_KillWithMachete%i",randomnumber);
					A_StartSound(Dude_KillWithMachete, CHAN_VOICE, CHANF_NOSTOP);
					KillWithMachete = false;
					PlayerData.DudeLineTriggered = false;
					fail = false;
				}
				
				if (KillWithFire)
				{
					int randomnumber = random[pickline](1,22);
					sound Dude_KillWithFireectile = string.Format("Dude_KillWithFireectile%i",randomnumber);
					A_StartSound(Dude_KillWithFireectile, CHAN_VOICE, CHANF_NOSTOP);
					KillWithFire = false;
					PlayerData.DudeLineTriggered = false;
					fail = false;
				}
			}
			
			
			if (fail && level.time > PlayerData.TimeBeforeDudeLine)
			{
				PlayerData.DudeLineTriggered = false;
			}
		}
	}
	
	// Removes (or atleast tries to) Doom bobbing
	// This includes falling bob
	void DoomDeletus()
	{
		// Disables Doom's falling bob
		player.deltaviewheight = ViewHeight;
		
		
		
		// Disable bobbing when walking
		if (PlayerData)
			PlayerData.MoveSpeed = vel.xy.Length();
			
		if (PlayerData.MoveSpeed < 3 && PlayerData)
			ViewBob = 0;
		else
			ViewBob = default.ViewBob; //might come in handy in the future: GetDefaultsByType (<class>)
	}
	
	override void Tick()
	{
		Super.Tick();
		if ( !player || (player.mo != self) ) return;
		
		//CheatDetector();
		A_TriggerDudeLine();
		DoomDeletus();
		
		/*// Kicking
		if (Kick)
			A_GiveInventory("PostKick", 1);*///could be useful maybe
			
	}
	
	
	Default
	{
	Player.DisplayName "Angel of Death";
	Player.SoundClass "Dude";
    Species "Player";
	Scale 0.53;
	//Scale 0.5 i havent redone his sprites yet so hes smaller than everyone else slightly
	Player.StartItem "PRLD_M12", 1;
	Player.StartItem "Machete", 1;
	Player.StartItem "Magazine1", 24;
	Player.StartItem "Magazine2", 22;
	Player.StartItem "Magazine3", 6;
	Player.StartItem "Magazine10", 1;
	Player.StartItem "Magazine11", 1;
	Player.StartItem "Magazine12", 1;
	Player.StartItem "GGrenade",1;
	Player.StartItem "Molotov",1;
	Player.StartItem "PipeBombWeap",1;
	Player.StartItem "Grenadee", 3;
	Player.StartItem "Molotovv",1;
	Player.StartItem "PB",1;
	Player.StartItem "DBMag", 2;
	Player.StartItem "MacheteAmmoLoaded", 1;
    Player.WeaponSlot 1, "Machete";
    Player.Weaponslot 2, "PRLD_M12", "MP5K", "Magnum";
    Player.Weaponslot 3, "DoubleBarrel", "Lever-Action";
    Player.Weaponslot 4, "M-16", "Spraycannon", "Machinegun";
    Player.Weaponslot 5, "MissileLauncher";
    Player.Weaponslot 6, "Flammenwerfer";
    Player.Weaponslot 7, "NapalmLauncher";
	Player.Weaponslot 8, "GGrenade", "PipeBombWeap", "Molotov";
    +SOLID
    +THRUSPECIES
    +THRUGHOST
	Player.ViewHeight 48;
	Player.AttackZOffset 15;
	BloodType "PRLD_BloodPlayer";
	}
	States
    {
    Spawn:
		TNT1 A 0;
		TNT1 A 0 A_Changeflag("NOPAIN", 0);
		TNT1 A 0 A_JumpIfInventory("SpecialAction", 1, "SpecialActionCheck");
        DUDE E 1;
		TNT1 A 0 A_Changeflag("THRUSPECIES", 0);
		Loop;
    See:
        DUDE A 4;
		TNT1 A 0 A_JumpIfInventory("SpecialAction", 1, "SpecialActionCheckOnTheMoveThisStateNameIsReallyLongDamnBro");
        DUDE B 4;
		TNT1 A 0 A_JumpIfInventory("SpecialAction", 1, "SpecialActionCheckOnTheMoveThisStateNameIsReallyLongDamnBro");
		DUDE C 4;
		TNT1 A 0 A_JumpIfInventory("SpecialAction", 1, "SpecialActionCheckOnTheMoveThisStateNameIsReallyLongDamnBro");
		DUDE D 4;
		TNT1 A 0 A_JumpIfInventory("SpecialAction", 1, "SpecialActionCheckOnTheMoveThisStateNameIsReallyLongDamnBro");
        Loop;
	Missile:
		DUDE E 12;
		Goto Spawn;
	Melee:
		DUDE L 6 BRIGHT;
		Goto Missile;
    Pain:
        TNT1 A 0 A_Pain;
        DUDE F 5;
        goto See;
    Death:
		DUDE G 5;
		DUDE H 5 A_PlayerScream;
		DUDE I 5 A_NoBlocking;
		DUDE J 5;
		DUDE K -1;
        Stop;
		
	//Special Action Checkers
	
	SpecialActionCheck:
		TNT1 A 0 A_JumpIfInventory("ExecuteDownedSheriff1", 1, "ExecuteSheriff1");
        TNT1 A 0 A_TakeInventory("SpecialAction", 1);
		TNT1 A 0 A_JumpIfInventory("ExecuteDownedSheriff1", 1, "ExecuteSheriff1");
        TNT1 A 0 A_TakeInventory("SpecialAction", 1);
        Goto Spawn;
	SpecialActionCheckOnTheMoveThisStateNameIsReallyLongDamnBro:
		TNT1 A 0 A_JumpIfInventory("ExecuteDownedSheriff1", 1, "ExecuteSheriff1");
		TNT1 A 0 A_TakeInventory("SpecialAction", 1);
		TNT1 A 0 A_JumpIfInventory("ExecuteDownedSheriff1", 1, "ExecuteSheriff1");
		TNT1 A 0 A_TakeInventory("SpecialAction", 1);
		Goto See;
		
	//Executions
	
	ExecuteSheriff1:
		TNT1 A 0;
		TNT1 A 0 A_GiveInventory("Kicking", 1);
		TNT1 A 0 A_GiveInventory("ExecuteDownedEnemy", 1);
		TNT1 A 0 A_GiveInventory("ExecuteDownedEnemy", 1);
		TNT1 A 0 A_TakeInventory("ExecuteDownedSheriff1", 1);
		
		TNT1 A 0 A_ChangeFlag("NOGRAVITY", 1);
		TNT1 A 0 A_ChangeFlag("INVULNERABLE", 1);
		//TNT1 A 0 A_SpawnItemEx("Sheriff1Execute",2,0,-10,0,0,0,0,SXF_NOCHECKPOSITION,0);
		TNT1 A 0 A_SpawnItem("Sheriff1Execute", 4);
		Goto Missile;
	}
}






class DudeCoreHandler : EventHandler 
{
	override void WorldUnloaded(WorldEvent e)
	{
		// Some data needs to be reset
		for (uint i = 0; i < MAXPLAYERS; i++)
		{
			if (Players[i].mo && Players[i].mo is 'PostalDude')
			{
				let DudePawn = PostalDude(Players[i].mo);
				if (DudePawn)
				{
					/*DudePawn.A_TakeInventory("PostKick",100);
					DudePawn.Kick = false;
					DudePawn.isinPain = false;
					DudePawn.InitLine = false;
					DudePawn.A_GiveInventory("HUDViewable",1);
					DudePawn.A_TakeInventory("CameraRunner",1);
					DudePawn.bDONTTHRUST = false;
					DudePawn.Speed = DudePawn.Default.Speed;
					DudePawn.JumpZ = DudePawn.Default.JumpZ;*/
					if (DudePawn.PlayerData)
					{
						//DudePawn.PlayerData.InsultCooldown = 0;
						DudePawn.PlayerData.DudeLineCooldown = 0;
						DudePawn.PlayerData.DudeLineTriggered = false;
						DudePawn.PlayerData.RunningStopCooldown = 0;
						//DudePawn.PlayerData.SpawnedOnce = false;
						//DudePawn.PlayerData.Suicide = false;
					}
				}
			}
		}
	}
	
	// Used for initiating Dude's killing spree lines
	// This is universal
	override void WorldThingDied(WorldEvent e)
	{	
		if (e.Inflictor && e.Thing)
		{
			if (!(e.Thing is 'PostalDude'))
			{
				// todo: Give every monster an inventory item, and always store the last attacker there
				if (e.Thing.target is 'PostalDude')
				{
					let DudePawn = PostalDude(e.Thing.target);
					
					if (DudePawn && !DudePawn.bKILLED)
					{
						let pa = PostalActor(e.Thing);
						if (pa && pa.STD_NoKillLine) return;
						
						if (DudePawn.PlayerData && !DudePawn.PlayerData.DudeLineTriggered && level.time > DudePawn.PlayerData.DudeLineCooldown)
						{
							DudePawn.InitLine = true;
							DudePawn.ChanceLocal = random[DudeLine](0,350);
						}
					}
				}
			}
		}
	}
}